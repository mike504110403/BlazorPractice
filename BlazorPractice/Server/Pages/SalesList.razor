@page "/salesList"
@using System.Collections.ObjectModel
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IPubsService pubsService
@inject IJSRuntime JSRuntime


<PageTitle>銷售資料列表</PageTitle>

<h1>銷售資料列表</h1>

<p>顯示sale資料</p>

@if (_salesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="SalesInfoViewModel" Items="@_salesData" ReadOnly="@true" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.StorName" Title="書店名稱" IsEditable="false" />
            <PropertyColumn Property="x => x.OrderNum" Title="訂單編號" IsEditable="false" />
            <PropertyColumn Property="x => x.OrderDate" Title="銷售日期" IsEditable="false" />
            <PropertyColumn Property="x => x.TitleName" Title="書名" IsEditable="false" />
            <PropertyColumn Property="x => x.Qty" Title="數量" />
            <PropertyColumn Property="x => x.Payterms" Title="付款條件" IsEditable="false" />
            <TemplateColumn Title="編輯">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => Edit(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="刪除">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="()=> Delete(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@if (showPopup)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
                @(IsNewMode ? "新增" : "編輯")銷售資料
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudForm Model="@currentSale" OnValidSubmit="@OnValidSubmit">
                <MudTextField Label="書店名稱" @bind-Value="currentSale.StorName" For="@(() => currentSale.StorName)" ReadOnly />
                <MudTextField Label="書名" @bind-Value="currentSale.TitleName" For="@(() => currentSale.TitleName)" ReadOnly />
                <MudTextField Label="訂單編號" @bind-Value="currentSale.OrderNum" For="@(() => currentSale.OrderNum)" ReadOnly />
                <MudTextField Label="銷售日期" @bind-Value="currentSale.OrderDate" For="@(() => currentSale.OrderDate)" ReadOnly />
                <MudTextField Label="數量" HelperText="請輸入正整數" InputType="InputType.Number" @bind-Value="currentSale.Qty" For="@(() => currentSale.Qty)" />
                <MudTextField Label="付款條件" @bind-Value="currentSale.Payterms" For="@(() => currentSale.Payterms)" ReadOnly />
                <DataAnnotationsValidator />
                <ValidationSummary />
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">取消</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">確認</MudButton>
        </DialogActions>
    </MudDialog>
}

@if (showPopup)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    @(IsNewMode ? "新增" : "編輯")銷售資料
                </div>
                <div class="modal-body">
                    <EditForm Modal="@currentSale" OnInvalidSubmit="OnValidSubmit">
                        <InputText id="name" class="form-control" @bind-Value="@currentSale.TitleName"></InputText>
                        <button type="submit">確認</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    @*<MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
                @(IsNewMode ? "新增" : "編輯")銷售資料
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudForm Model="@currentSale" OnValidSubmit="@OnValidSubmit">
                <MudTextField Label="書店名稱" @bind-Value="currentSale.StorName" For="@(() => currentSale.StorName)" ReadOnly />
                <MudTextField Label="書名" @bind-Value="currentSale.TitleName" For="@(() => currentSale.TitleName)" ReadOnly />
                <MudTextField Label="訂單編號" @bind-Value="currentSale.OrderNum" For="@(() => currentSale.OrderNum)" ReadOnly />
                <MudTextField Label="銷售日期" @bind-Value="currentSale.OrderDate" For="@(() => currentSale.OrderDate)" ReadOnly />
                <MudTextField Label="數量" HelperText="請輸入正整數" InputType="InputType.Number" @bind-Value="currentSale.Qty" For="@(() => currentSale.Qty)" />
                <MudTextField Label="付款條件" @bind-Value="currentSale.Payterms" For="@(() => currentSale.Payterms)" ReadOnly />
                <DataAnnotationsValidator />
                <ValidationSummary />
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">取消</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">確認</MudButton>
        </DialogActions>
    </MudDialog>*@
}


@code {

    private ObservableCollection<SalesInfoViewModel> _salesData;
    /// <summary>
    ///進頁面時，先抓取資料
    /// </summary>
    /// <returns></returns> <summary>
    protected override async Task OnInitializedAsync()
    {
        // 轉成ObservableCollection，才能在畫面上直接更新異動
        _salesData = new ObservableCollection<SalesInfoViewModel>(await pubsService.GetAsync());
    }

    bool success;

    /// <summary>
    /// 新增單筆資料
    /// </summary>
    private void Add(SalesInfoViewModel sale)
    {
        IsNewMode = true;
        currentSale = sale;
        showPopup = true;
    }
    /// <summary>
    /// 編輯單筆資料
    /// </summary>
    /// <param name="sale"></param>
    private void Edit(SalesInfoViewModel sale)
    {
        IsNewMode = false;
        currentSale = oriSale = sale.Clone();
        currentSale = sale.Clone();
        oriSale = sale;
        showPopup = true;
    }
    /// <summary>
    /// 刪除單筆資料
    /// </summary>
    /// <param name="orderNum"></param>
    private void Delete(SalesInfoViewModel sale)
    {
        pubsService.DeleteAsync(sale.OrderNum);
        _salesData.Remove(sale); // 移除畫面中的
    }

    #region 新增/編輯彈窗
    /// <summary>
    /// 目前slae
    /// </summary>
    public SalesInfoViewModel currentSale = new SalesInfoViewModel();
    /// <summary>
    /// 原來的slae
    /// </summary>
    public SalesInfoViewModel oriSale = new SalesInfoViewModel();
    /// <summary>
    /// 是否開彈窗
    /// </summary>
    public bool showPopup = false;
    /// <summary>
    /// 修改方式是否為新增
    /// </summary>
    public bool IsNewMode = false;
    /// <summary>
    /// 確認彈窗
    /// </summary>
    /// <param name="context"></param>
    private void OnValidSubmit()
    {
        showPopup = false;
        if (IsNewMode)
        {
            pubsService.CreateAsync(currentSale);
            _salesData.Add(currentSale);
            StateHasChanged();
        }
        else
        {
            pubsService.UpdateAsync(currentSale);
            _salesData.Remove(oriSale);
            _salesData.Add(currentSale);
            StateHasChanged();
        }
        StateHasChanged();
    }
    /// <summary>
    /// 關閉彈窗
    /// </summary>
    private void Cancel()
    {
        showPopup = false;
        StateHasChanged();
    }

    #endregion


}